plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'

    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'com.cool.yfc'
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
                arg("AROUTER_MODULE_NAME", project.name)
            }
        }
    }

    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            multiDexEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        viewBinding true // 使用声明性格式将布局中的界面组件绑定到应用中的数据源。
        dataBinding = true
    }
}

dependencies {
    // 在 Android 中进行测试。
    // https://developer.android.com/jetpack/androidx/releases/test?hl=zh-cn
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"

    // https://kotlinlang.org/
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10"

    // 适用于 Android 的模块化、可自定义 Material Design 界面组件。
    // Material Components for Android (MDC-Android) help developers execute Material Design.
    // Developed by a core team of engineers and UX designers at Google,
    // these components enable a reliable development workflow to build beautiful and functional Android apps.
    // Material Components for Android is a drop-in replacement for Android's Design Support Library.
    // https://mvnrepository.com/artifact/com.google.android.material/material
    // https://github.com/material-components/material-components-android
    // https://m2.material.io/develop/android
    api "com.google.android.material:material:1.8.0"

    //////////////////////////////////////////////////////////////////androidx begin//////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////androidx begin//////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////androidx begin//////////////////////////////////////////////////////////////////////

    // 在搭载 Android 5 之前版本的设备上部署包含多个 dex 文件的应用。
    // https://developer.android.com/jetpack/androidx/releases/multidex?hl=zh-cn
    api "androidx.multidex:multidex:2.0.1"

    // 针对最新的平台功能和 API 调整应用，同时还支持旧设备。
    // https://developer.android.com/jetpack/androidx/releases/core?hl=zh-cn
    def core_version = "1.9.0"
//    // Java language implementation
//    api "androidx.core:core:$core_version"
    // Kotlin
    api "androidx.core:core-ktx:$core_version"
    // To use RoleManagerCompat
    api "androidx.core:core-role:1.0.0"
    // To use the Animator APIs
    api "androidx.core:core-animation:1.0.0-beta01"
//    // To test the Animator APIs
//    androidTestApi "androidx.core:core-animation-testing:1.0.0-beta01"
    // Optional - To enable APIs that query the performance characteristics of GMS devices.
    api "androidx.core:core-performance:1.0.0-alpha02"
    // Optional - to use ShortcutManagerCompat to donate shortcuts to be used by Google
    api "androidx.core:core-google-shortcuts:1.1.0"
    // Optional - to support backwards compatibility of RemoteViews
    api "androidx.core:core-remoteviews:1.0.0-beta03"
    // Optional - APIs for SplashScreen, including compatibility helpers on devices prior Android 12
    api "androidx.core:core-splashscreen:1.0.0"

    // 允许在平台的旧版 API 上访问新 API（很多使用 Material Design）。
    // https://mvnrepository.com/artifact/androidx.appcompat
    // https://developer.android.com/jetpack/androidx/releases/appcompat?hl=zh-cn#groovy
    def appcompat_version = "1.6.1"
    api "androidx.appcompat:appcompat:$appcompat_version"
    // For loading and tinting drawables on older versions of the platform
    api "androidx.appcompat:appcompat-resources:$appcompat_version"

    // 在当前设备和版本更低的设备上显示表情符号。
    // https://developer.android.com/jetpack/androidx/releases/emoji2?hl=zh-cn
    def emoji2_version = "1.2.0"
    api "androidx.emoji2:emoji2:$emoji2_version"
    api "androidx.emoji2:emoji2-views:$emoji2_version"
    api "androidx.emoji2:emoji2-views-helper:$emoji2_version"

    // 在您的界面中显示大量数据，同时最大限度减少内存用量。
    // https://developer.android.com/jetpack/androidx/releases/recyclerview?hl=zh-cn#1.2.1
    // https://mvnrepository.com/artifact/androidx.recyclerview/recyclerview/1.2.1
    api "androidx.recyclerview:recyclerview:1.2.1"
    // For control over item selection of both touch and mouse driven selection
    api "androidx.recyclerview:recyclerview-selection:1.1.0"

    // 使用相对定位灵活地确定 widget 的位置和大小。
    // https://mvnrepository.com/artifact/androidx.constraintlayout/constraintlayout/2.2.0-alpha07
    api "androidx.constraintlayout:constraintlayout:2.2.0-alpha07"
    // Solver for ConstraintLayout
    // https://mvnrepository.com/artifact/androidx.constraintlayout/constraintlayout-solver
    api "androidx.constraintlayout:constraintlayout-solver:2.0.4"

    // 用圆角和阴影实现 Material Design 卡片模式。
    // https://mvnrepository.com/artifact/androidx.cardview/cardview
    api "androidx.cardview:cardview:1.0.0"

    // 实现下拉刷新的界面模式。
    // https://developer.android.com/jetpack/androidx/releases/swiperefreshlayout?hl=zh-cn
    api "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    // 实现滑动窗格界面模式。
    // https://developer.android.com/jetpack/androidx/releases/slidingpanelayout?hl=zh-cn
    api "androidx.slidingpanelayout:slidingpanelayout:1.2.0"

    // 实现 Material Design 抽屉式导航栏 widget。
    // https://developer.android.com/jetpack/androidx/releases/drawerlayout?hl=zh-cn
    api "androidx.drawerlayout:drawerlayout:1.1.1"

    // 实现自定义视图。
    // https://developer.android.com/jetpack/androidx/releases/customview?hl=zh-cn
    api "androidx.customview:customview:1.1.0"

    // 读取和写入图片文件 EXIF 标记。
    // https://developer.android.com/jetpack/androidx/releases/exifinterface?hl=zh-cn
    // https://mvnrepository.com/artifact/androidx.exifinterface/exifinterface
    api "androidx.exifinterface:exifinterface:1.3.6"

    // 向 ListView widget 提供光标数据。
    // https://developer.android.com/jetpack/androidx/releases/cursoradapter?hl=zh-cn
    api "androidx.cursoradapter:cursoradapter:1.0.0"

    // 在后台线程中加载 ContentProvider 数据并进行分页。
    // https://developer.android.com/jetpack/androidx/releases/contentpager?hl=zh-cn
    api "androidx.contentpager:contentpager:1.0.0"

    // 渲染矢量图形。
    // https://developer.android.com/jetpack/androidx/releases/vectordrawable?hl=zh-cn
    // https://mvnrepository.com/artifact/androidx.vectordrawable/vectordrawable/1.1.0
    api "androidx.vectordrawable:vectordrawable:1.1.0"
    // To be able to animate properties of a VectorDrawable, add the following.  Useful for illustration purposes or state changes in response to user events
    api "androidx.vectordrawable:vectordrawable-animated:1.1.0"
    // To use a seekable alternative for `androidx.vectordrawable:vectordrawable-animated` add the following
    api "androidx.vectordrawable:vectordrawable-seekable:1.0.0-beta01"

    // 构建生命周期感知型组件，这些组件可以根据 activity 或 fragment 的当前生命周期状态调整行为。
    // https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=zh-cn
    def lifecycle_version = "2.5.1"
    def arch_version = "2.1.0"
    // ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
//    // ViewModel utilities for Compose
//    api "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // LiveData
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
//    // Annotation processor
//    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    api "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    api "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    api "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // optional - Test helpers for LiveData
    testApi "androidx.arch.core:core-testing:$arch_version"
    // optional - Test helpers for Lifecycle runtime
    testApi "androidx.lifecycle:lifecycle-runtime-testing:$lifecycle_version"

    // 构建和组织应用内界面，处理深层链接以及在屏幕之间导航。
    // https://developer.android.com/jetpack/androidx/releases/navigation?hl=zh-cn
    def nav_version = "2.5.3"
//    // Java language implementation
//    api "androidx.navigation:navigation-fragment:$nav_version"
    api "androidx.navigation:navigation-ui:$nav_version"
    // Kotlin
    api "androidx.navigation:navigation-fragment-ktx:$nav_version"
    api "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Feature module Support
    api "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    // Testing Navigation
    androidTestApi "androidx.navigation:navigation-testing:$nav_version"
//    // Jetpack Compose Integration
//    api "androidx.navigation:navigation-compose:$nav_version"

    // 	使用本地 SQLite 数据库。如果可能，请改用 Room。
    // https://developer.android.com/jetpack/androidx/releases/sqlite?hl=zh-cn
    def sqlite_version = "2.3.0"
//    // Java language implementation
//    api "androidx.sqlite:sqlite:$sqlite_version"
    // Kotlin
    api "androidx.sqlite:sqlite-ktx:$sqlite_version"
    // Implementation of the AndroidX SQLite interfaces via the Android framework APIs.
    api "androidx.sqlite:sqlite-framework:$sqlite_version"

    // 创建、存储和管理由 SQLite 数据库支持的持久性数据。
    // https://developer.android.com/jetpack/androidx/releases/room?hl=zh-cn
    def room_version = "2.5.0"
    api "androidx.room:room-runtime:$room_version"
//    annotationProcessor "androidx.room:room-compiler:$room_version"
    // To use Kotlin annotation processing tool (kapt)
    kapt "androidx.room:room-compiler:$room_version"
//    // To use Kotlin Symbol Processing (KSP)
//    ksp "androidx.room:room-compiler:$room_version"
    // optional - RxJava2 support for Room
    api "androidx.room:room-rxjava2:$room_version"
    // optional - RxJava3 support for Room
    api "androidx.room:room-rxjava3:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    api "androidx.room:room-guava:$room_version"
    // optional - Test helpers
    testApi "androidx.room:room-testing:$room_version"
    // optional - Paging 3 Integration
    api "androidx.room:room-paging:$room_version"

    // 以可滑动的格式显示视图或 Fragment。
    // https://developer.android.com/jetpack/androidx/releases/viewpager2?hl=zh-cn
    api "androidx.viewpager2:viewpager2:1.0.0"

    // 帮助支持不同的设备类型，例如可折叠设备。
    // https://developer.android.com/jetpack/androidx/releases/window?hl=zh-cn
    api "androidx.window:window:1.0.0"
    // For Java-friendly APIs to register and unregister callbacks
    api "androidx.window:window-java:1.0.0"
    // For RxJava2 integration
    api "androidx.window:window-rxjava2:1.0.0"
    // For RxJava3 integration
    api "androidx.window:window-rxjava3:1.0.0"
//    // For testing
//    api "androidx.window:window-testing:1.0.0"

    // 调度和执行可延期且基于约束条件的后台任务。
    // https://developer.android.com/jetpack/androidx/releases/work?hl=zh-cn
    def work_version = "2.8.0"
//    // (Java only)
//    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    api "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    api "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    api "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    androidTestApi "androidx.work:work-testing:$work_version"
    // optional - Multiprocess support
    api "androidx.work:work-multiprocess:$work_version"

    // 在 Android 5 及更高版本上使用新式 WebView API。
    // https://developer.android.com/jetpack/androidx/releases/webkit?hl=zh-cn
    api "androidx.webkit:webkit:1.6.0"

    // 使用开始和结束布局为界面中的动作添加动画效果。
    // https://developer.android.com/jetpack/androidx/releases/transition?hl=zh-cn
//    // Java language implementation
//    api "androidx.transition:transition:1.4.1"
    // Kotlin
    api "androidx.transition:transition-ktx:1.4.1"

    // 识别文本中的对话、链接、选定内容和其他类似构造内容。
    // https://developer.android.com/jetpack/androidx/releases/textclassifier?hl=zh-cn
    api "androidx.textclassifier:textclassifier:1.0.0-alpha04"

    // 提供向后兼容性，可以将快捷方式用作直接共享目标。
    // https://developer.android.com/jetpack/androidx/releases/sharetarget?hl=zh-cn
    api "androidx.sharetarget:sharetarget:1.2.0"

    // 安全地管理密钥并对文件和 sharedpreferences 进行加密。
    // https://developer.android.com/jetpack/androidx/releases/security?hl=zh-cn
    api "androidx.security:security-crypto:1.0.0"
    // For Identity Credential APIs
    api "androidx.security:security-identity-credential:1.0.0-alpha03"
    // For App Authentication APIs
    api "androidx.security:security-app-authenticator:1.0.0-alpha02"
    // For App Authentication API testing
    androidTestApi "androidx.security:security-app-authenticator:1.0.0-alpha02"

    // 编写可插入组件，这些组件会在进程终止时保存界面状态，并在进程重启时恢复界面状态。
    // https://developer.android.com/jetpack/androidx/releases/savedstate?hl=zh-cn
//    // Java language implementation
//    api "androidx.savedstate:savedstate:1.2.0"
    // Kotlin
    api "androidx.savedstate:savedstate-ktx:1.2.0"

    // 在 Android Studio 的实时布局检查器中显示自定义视图的属性。
    // https://developer.android.com/jetpack/androidx/releases/resourceinspection?hl=zh-cn
    api "androidx.resourceinspection:resourceinspection-annotation:1.0.1"

    // 通过您的应用打印照片、文档、其他图形及图片。
    // https://developer.android.com/jetpack/androidx/releases/print?hl=zh-cn
    api "androidx.print:print:1.1.0-beta01"

    // 在页面中加载数据，并在 RecyclerView 中呈现。
    // https://developer.android.com/jetpack/androidx/releases/paging?hl=zh-cn
    def paging_version = "3.1.1"
    api "androidx.paging:paging-runtime:$paging_version"
    // alternatively - without Android dependencies for tests
    testApi "androidx.paging:paging-common:$paging_version"
    // optional - RxJava2 support
    api "androidx.paging:paging-rxjava2:$paging_version"
    // optional - RxJava3 support
    api "androidx.paging:paging-rxjava3:$paging_version"
    // optional - Guava ListenableFuture support
    api "androidx.paging:paging-guava:$paging_version"
    // optional - Jetpack Compose integration
    api "androidx.paging:paging-compose:1.0.0-alpha18"

    // 与其他应用共享媒体内容和控件。
    // https://developer.android.com/jetpack/androidx/releases/media2?hl=zh-cn
    def media2_version = "1.2.1"
    // Interacting with MediaSessions
    api "androidx.media2:media2-session:$media2_version"
    // optional - UI widgets for VideoView and MediaControlView
    api "androidx.media2:media2-widget:$media2_version"
    // optional - Implementation of a SessionPlayer
    api "androidx.media2:media2-player:$media2_version"

    def useMedia3 = false
    if (useMedia3) {
        // 适用于媒体用例的支持库。
        // https://developer.android.com/jetpack/androidx/releases/media3?hl=zh-cn
        def media3_version = "1.0.0-rc01"
        // For media playback using ExoPlayer
        api "androidx.media3:media3-exoplayer:$media3_version"
        // For DASH playback support with ExoPlayer
        api "androidx.media3:media3-exoplayer-dash:$media3_version"
        // For HLS playback support with ExoPlayer
        api "androidx.media3:media3-exoplayer-hls:$media3_version"
        // For RTSP playback support with ExoPlayer
        api "androidx.media3:media3-exoplayer-rtsp:$media3_version"
        // For ad insertion using the Interactive Media Ads SDK with ExoPlayer
        api "androidx.media3:media3-exoplayer-ima:$media3_version"
        // For loading data using the Cronet network stack
        api "androidx.media3:media3-datasource-cronet:$media3_version"
        // For loading data using the OkHttp network stack
        api "androidx.media3:media3-datasource-okhttp:$media3_version"
        // For loading data using librtmp
        api "androidx.media3:media3-datasource-rtmp:$media3_version"
        // For building media playback UIs
        api "androidx.media3:media3-ui:$media3_version"
        // For building media playback UIs for Android TV using the Jetpack Leanback library
        api "androidx.media3:media3-ui-leanback:$media3_version"
        // For exposing and controlling media sessions
        api "androidx.media3:media3-session:$media3_version"
        // For extracting data from media containers
        api "androidx.media3:media3-extractor:$media3_version"
        // For integrating with Cast
        api "androidx.media3:media3-cast:$media3_version"
        // For scheduling background operations using Jetpack Work's WorkManager with ExoPlayer
        api "androidx.media3:media3-exoplayer-workmanager:$media3_version"
        // For transforming media files
        api "androidx.media3:media3-transformer:$media3_version"
//    // Utilities for testing media components (including ExoPlayer components)
//    api "androidx.media3:media3-test-utils:$media3_version"
//    // Utilities for testing media components (including ExoPlayer components) via Robolectric
//    api "androidx.media3:media3-test-utils-robolectric:$media3_version"
        // Common functionality for media database components
        api "androidx.media3:media3-database:$media3_version"
        // Common functionality for media decoders
        api "androidx.media3:media3-decoder:$media3_version"
        // Common functionality for loading data
        api "androidx.media3:media3-datasource:$media3_version"
        // Common functionality used across multiple media libraries
        api "androidx.media3:media3-common:$media3_version"
    }

    // 利用多个 Android 平台版本中的图形工具
    // https://developer.android.com/jetpack/androidx/releases/graphics?hl=zh-cn
    api "androidx.graphics:graphics-core:1.0.0-alpha02"

    // 将您的应用细分为在一个 Activity 中托管的多个独立屏幕。
    // https://developer.android.com/jetpack/androidx/releases/fragment?hl=zh-cn
    def fragment_version = "1.5.5"
//    // Java language implementation
//    implementation "androidx.fragment:fragment:$fragment_version"
    // Kotlin
    api "androidx.fragment:fragment-ktx:$fragment_version"
//    // Testing Fragments in Isolation
//    debugApi "androidx.fragment:fragment-testing:$fragment_version"

    // 	访问基于 activity 构建的可组合 API。
    // https://developer.android.com/jetpack/androidx/releases/activity?hl=zh-cn
    def activity_version = "1.6.1"
//    // Java language implementation
//    api "androidx.activity:activity:$activity_version"
    // Kotlin
    api "androidx.activity:activity-ktx:$activity_version"

    // 接受来自其他应用或应用内的拖放数据，并显示一致的拖放目标可视效果。
    // https://developer.android.com/jetpack/androidx/releases/draganddrop?hl=zh-cn
    api "androidx.draganddrop:draganddrop:1.0.0"

    // 查看文件文档。
    // https://developer.android.com/jetpack/androidx/releases/documentfile?hl=zh-cn
    api "androidx.documentfile:documentfile:1.0.1"

    // 以异步、一致的事务方式存储数据，克服了 SharedPreferences 的一些缺点
    // https://developer.android.com/jetpack/androidx/releases/datastore?hl=zh-cn
    // Preferences DataStore (SharedPreferences like APIs)
    api "androidx.datastore:datastore-preferences:1.0.0"
    // optional - RxJava2 support
    api "androidx.datastore:datastore-preferences-rxjava2:1.0.0"
    // optional - RxJava3 support
    api "androidx.datastore:datastore-preferences-rxjava3:1.0.0"
//    // Alternatively - use the following artifact without an Android dependency.
//    api "androidx.datastore:datastore-preferences-core:1.0.0"

    // 降低现有和新的小型集合对内存的影响。
    // https://developer.android.com/jetpack/androidx/releases/collection?hl=zh-cn
    def collection_version = "1.2.0"
//    // Java language implementation
//    api "androidx.collection:collection:$collection_version"
    // Kotlin
    api "androidx.collection:collection-ktx:$collection_version"

    // 在用户的默认浏览器中显示网页。
    // https://developer.android.com/jetpack/androidx/releases/browser?hl=zh-cn
    api "androidx.browser:browser:1.5.0"

    // 通过生物识别特征或设备凭据进行身份验证，以及执行加密操作。
    // 通过生物识别特征或设备凭据进行身份验证，以及执行加密操作。
//    // Java language implementation
//    api "androidx.biometric:biometric:1.1.0"
    // Kotlin
    api "androidx.biometric:biometric-ktx:1.2.0-alpha05"

    // 通过扩展提示，提高自动填充的准确性。
    // https://developer.android.com/jetpack/androidx/releases/autofill?hl=zh-cn
    api "androidx.autofill:autofill:1.1.0"

    // 异步膨胀布局以避免界面出现卡顿。
    // https://developer.android.com/jetpack/androidx/releases/asynclayoutinflater?hl=zh-cn
    api "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0"

    // 公开元数据，帮助工具开发者和其他开发者了解您的应用代码。
    // https://developer.android.com/jetpack/androidx/releases/annotation?hl=zh-cn
    api "androidx.annotation:annotation:1.5.0"
    // To use the Java-compatible @Experimental API annotation
    api "androidx.annotation:annotation-experimental:1.3.0"

    //////////////////////////////////////////////////////////////////androidx end//////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////androidx end//////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////androidx end//////////////////////////////////////////////////////////////////////

    // Glide是一个快速高效的Android图片加载库，注重于平滑的滚动。Glide提供了易用的API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。
    // Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。
    // 默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。
    // 虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。
    // https://github.com/bumptech/glide
    api "com.github.bumptech.glide:glide:4.13.0"
    kapt "com.github.bumptech.glide:compiler:4.13.0"
    api "com.github.bumptech.glide:okhttp3-integration:4.10.0"
    // Coil 是一个 Android 图片加载库，通过 Kotlin 协程的方式加载图片
    // https://github.com/coil-kt/coil
    api "io.coil-kt:coil:2.1.0"
    // A powerful image downloading and caching library for Android
    // https://github.com/square/picasso
    api "com.squareup.picasso:picasso:2.8"
    // Lottie is a mobile library for Android and iOS that parses Adobe After Effects animations exported as json with Bodymovin and renders them natively on mobile!
    // https://github.com/airbnb/lottie-android
    api "com.airbnb.android:lottie:4.1.0"

    // 基础封装视频播放器player，可以在ExoPlayer、MediaPlayer原生MediaPlayer可以自由切换内核；
    // 该播放器整体架构：播放器内核(自由切换) + 视频播放器 + 边播边缓存 + 高度定制播放器UI视图层。支持视频简单播放，列表播放，仿抖音滑动播放，自动切换播放，使用案例丰富，拓展性强。
    // https://github.com/yangchong211/YCVideoPlayer
    //视频UI层，必须要有
    api 'cn.yc:VideoPlayer:3.1.0'
    // 视频缓存，如果不需要则可以不依赖
    api 'cn.yc:VideoCache:3.0.5'
    // 视频内核层，必须有
    api 'cn.yc:VideoKernel:3.0.6'
    // 视频播放器播放位置记录，选择性添加
    api 'cn.yc:VideoSqlLite:1.0.2'

    // exoplayer
    // https://github.com/google/ExoPlayer
    api "com.google.android.exoplayer:exoplayer:2.18.3"

    // Android权限适配的更优解决方案：
    // 方法级权限适配、解耦Activity和Fragment、不再需要Context、不再需要onPermissionResult
    // 内部涵盖版本判断，一行代码解决权限相关操作，无需在调用业务方写权限适配代码，继而实现真正调用时请求的“真运行时权限”
    // 接入成本低，代码改动极小，零入侵，仅需要在gradle配置一行代码
    // 支持多项权限同时请求
    // 支持特殊权限(Notification[通知]、SystemAlert[应用悬浮窗]、UNKNOW_SOURCE[未知来源应用安装]、WRITE_SYS_SETTINGS[写入系统设置])的检查与请求
    // 支持系统权限页面跳转
    // 支持debug模式
    api "com.github.soulqw:SoulPermission:1.3.1"

    // Android 权限请求框架，已适配 Android 13
    // https://github.com/getActivity/XXPermissions
    api "com.github.getActivity:XXPermissions:16.6"

    // AndroidUtilCode 🔥 是一个强大易用的安卓工具类库，它合理地封装了安卓开发中常用的函数，具有完善的 Demo 和单元测试，利用其封装好的 APIs 可以大大提高开发效率， 如今它主要包括两部分模块，
    // 其一是主工具类模块：utilcode，其中的工具类是开发中常用到的；
    // 其二是子工具类模块：subutil，它包含的工具类并不是很常用，它的出现是为了防止主工具类的臃肿。 🔥
    // blankj https://github.com/Blankj/AndroidUtilCode
    api "com.blankj:utilcodex:1.31.1"

    // EventBus is a publish/subscribe event bus for Android and Java.
    // https://github.com/greenrobot/EventBus
    api "org.greenrobot:eventbus:3.3.1"

    // RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences.
    // It extends the observer pattern to support sequences of data/events and adds operators that allow you to compose sequences together
    // declaratively while abstracting away concerns about things like low-level threading, synchronization, thread-safety and concurrent data structures.
    // https://github.com/ReactiveX/RxJava
    api "io.reactivex.rxjava3:rxjava:3.1.6"
    // Android specific bindings for RxJava 3.
    // This module adds the minimum classes to RxJava that make writing reactive components in Android applications easy and hassle-free.
    // More specifically, it provides a Scheduler that schedules on the main thread or any given Looper.
    // https://github.com/ReactiveX/RxAndroid
    api "io.reactivex.rxjava3:rxandroid:3.0.2"
    // RxKotlin is a lightweight library that adds convenient extension functions to RxJava.
    // You can use RxJava with Kotlin out-of-the-box, but Kotlin has language features (such as extension functions) that can streamline usage of RxJava even more.
    // RxKotlin aims to conservatively collect these conveniences in one centralized library, and standardize conventions for using RxJava with Kotlin.
    // https://github.com/ReactiveX/RxKotlin
    api "io.reactivex.rxjava3:rxkotlin:3.0.1"

    // Guava is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library,
    // and utilities for concurrency, I/O, hashing, caching, primitives, strings, and more!
    // It is widely used on most Java projects within Google, and widely used by many other companies as well.
    // https://github.com/google/guava
    api "com.google.guava:guava:31.1-android"

    // Gson is a Java library that can be used to convert Java Objects into their JSON representation.
    // It can also be used to convert a JSON string to an equivalent Java object.
    // Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.
    // https://github.com/google/gson
    api "com.google.code.gson:gson:2.10.1"

    // HTTP is the way modern applications network. It’s how we exchange data & media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth.
    // OkHttp is an HTTP client that’s efficient by default:
    // HTTP/2 support allows all requests to the same host to share a socket.
    // Connection pooling reduces request latency (if HTTP/2 isn’t available).
    // Transparent GZIP shrinks download sizes.
    // Response caching avoids the network completely for repeat requests.
    // OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems.
    // If your service has multiple IP addresses, OkHttp will attempt alternate addresses if the first connect fails.
    // This is necessary for IPv4+IPv6 and services hosted in redundant data centers.
    // OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for broad connectivity.
    // Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability.
    // It supports both synchronous blocking calls and async calls with callbacks.
    // https://github.com/square/okhttp
    // define a BOM and its version
    def okhttp3_version = "4.10.0"
    api(platform("com.squareup.okhttp3:okhttp-bom:$okhttp3_version"))
    // define any required OkHttp artifacts without version
    api("com.squareup.okhttp3:okhttp")
    api("com.squareup.okhttp3:logging-interceptor")
    testApi("com.squareup.okhttp3:mockwebserver:$okhttp3_version")

    // A type-safe HTTP client for Android and Java.
    // https://github.com/square/retrofit
    def retrofit2_version = "2.9.0"
    api "com.squareup.retrofit2:retrofit:$retrofit2_version"
    api "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    api "com.squareup.retrofit2:converter-scalars:$retrofit2_version"
    api "com.squareup.retrofit2:converter-simplexml:$retrofit2_version"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version"

    // 以最简洁的 Api 让 Retrofit 同时支持多个 BaseUrl 以及动态改变 BaseUrl.
    // https://github.com/JessYanCoding/RetrofitUrlManager
    api "me.jessyan:retrofit-url-manager:1.4.0"

    // A low-cost Android screen adaptation solution (今日头条屏幕适配方案终极版，一个极低成本的 Android 屏幕适配方案).
    // https://github.com/JessYanCoding/AndroidAutoSize
    api "com.github.JessYanCoding:AndroidAutoSize:v1.2.1"

    // jsoup is a Java library for working with real-world HTML.
    // It provides a very convenient API for fetching URLs and extracting and manipulating data, using the best of HTML5 DOM methods and CSS selectors.
    // https://github.com/jhy/jsoup
    api "org.jsoup:jsoup:1.15.3"

    // Aria项目源于工作中遇到的一个文件下载管理的需求，当时被下载折磨的痛不欲生，从那时起便萌生了编写一个简单易用，稳当高效的下载框架，aria经历了1.0到3.0的开发，算是越来越接近当初所制定的目标了。
    // https://github.com/AriaLyy/Aria
    def aria_version = "3.8.16"
    api "me.laoyuyu.aria:core:$aria_version"
    kapt "me.laoyuyu.aria:compiler:$aria_version"
    api "me.laoyuyu.aria:ftp:$aria_version" // 如果需要使用ftp，请增加该组件
    api "me.laoyuyu.aria:sftp:$aria_version" // 如果需要使用ftp，请增加该组件
    api "me.laoyuyu.aria:m3u8:$aria_version" // 如果需要使用m3u8下载功能，请增加该组件

    // 帮助 Android App 进行组件化改造的路由框架
    // https://github.com/alibaba/ARouter
    api "com.alibaba:arouter-api:1.5.2"
    kapt "com.alibaba:arouter-compiler:1.5.2"

    // 一款针对Android平台下的图片选择器，支持从相册获取图片、视频、音频&拍照，支持裁剪(单图or多图裁剪)、压缩、主题自定义配置等功能，支持动态获取权限&适配Android 5.0+系统的开源图片选择框架。
    // https://github.com/LuckSiege/PictureSelector/blob/version_component/README_CN.md
    def lucksiege_version = "v3.10.7"
    // PictureSelector 基础 (必须)
    api "io.github.lucksiege:pictureselector:$lucksiege_version"
    // 图片压缩 (按需引入)
    api "io.github.lucksiege:compress:$lucksiege_version"
    // 图片裁剪 (按需引入)
    api "io.github.lucksiege:ucrop:$lucksiege_version"
    // 自定义相机 (按需引入)
    api "io.github.lucksiege:camerax:$lucksiege_version"

    // 强大而灵活的RecyclerView Adapter
    // https://github.com/CymChad/BaseRecyclerViewAdapterHelper
//    api "io.github.cymchad:BaseRecyclerViewAdapterHelper:4.0.0-beta02"
    api "com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.10"

    // 万能阴影布局
    // 支持定制化阴影：
    //    1. 随意修改阴影颜色值
    //    2. 阴影圆角：可统一设置圆角，也可对某几个角单独设置
    //    3. 阴影x,y偏移量
    //    4. 随意修改阴影扩散程度,即阴影大小
    //    5. 隐藏阴影：隐藏某边或多边阴影，或完全隐藏
    //    6. 可随意代码动态修改阴影
    //
    // 不止于阴影；系统shape功能：项目中shape、selector、ripple统统拥有。解放你的双手，清空项目drawable文件夹
    //    1. shape样式：pressed（按钮点击）、selected（按钮选择）、ripple（点击水波纹）
    //    2. 背景色设置
    //    3. stroke边框设置
    //    4. 渐变色背景色设置
    //    5. 按钮是否可被点击及不可点击背景
    //    6. 可绑定textView后，可伴随文案变化，可伴随文案颜色变化
    //    7. 支持设置图片背景，支持图片selector
    //
    // https://github.com/lihangleo2/ShadowLayout
    api "com.github.lihangleo2:ShadowLayout:3.3.2"

    // 只做一个可以自定义的轮播容器，不侵入UI ———— Banner 2.0
    // https://github.com/youth5201314/banner
    api "io.github.youth5201314:banner:2.2.2"

    // 一个扩展原生控件支持圆角矩形框背景的库,可以减少相关shape
    // https://github.com/H07000223/FlycoRoundView
    api "com.flyco.roundview:FlycoRoundView_Lib:1.1.4@aar"

    // 圆角图片
    // A fast ImageView (and Drawable) that supports rounded corners (and ovals or circles) based on the original example from Romain Guy.
    // It supports many additional features including ovals, rounded rectangles, ScaleTypes and TileModes.
    // https://github.com/vinc3m1/RoundedImageView
    api "com.makeramen:roundedimageview:2.3.0"

    // ImagePreview
    api "com.ycjiang:ImagePreview:2.3.5"

    // 一款强大好用的进度条
    // https://github.com/Jay-Goo/RangeSeekBar
    api "com.github.Jay-Goo:RangeSeekBar:v3.0.0"

    // Views and Drawable for animated GIFs in Android.
    // https://github.com/koral--/android-gif-drawable
    api "pl.droidsonroids.gif:android-gif-drawable:1.2.24"

    // EasyFloat：Android悬浮窗框架
    // 支持单页面浮窗，无需权限申请
    // 支持全局浮窗、应用前台浮窗，需要授权悬浮窗权限
    // 自动权限检测、自动跳转浮窗权限管理页、自动处理授权结果
    // 支持系统浮窗的页面过滤
    // 支持拖拽，支持各种状态的回调
    // 支持默认位置的设定，支持对齐方式和偏移量的设定
    // 支持创建多个单页面浮窗、多个系统浮窗，Tag进行区分
    // 支持出入动画的设定，有默认动画，可自行替换（策略模式）
    // 使用简单、链式调用、可轻松修改浮窗View
    // 支持Kotlin DSL，可按需回调状态，摆脱Java的繁琐
    // 支持状态栏沉浸，侧滑打开、拖拽关闭
    // 支持解锁更多姿势，如：拖拽缩放、通知弹窗...
    // https://github.com/princekin-f/EasyFloat
    api "com.github.princekin-f:EasyFloat:2.0.4"

    // Android TabLayout库
    // https://github.com/H07000223/FlycoTabLayout
    api "io.github.h07000223:flycoTabLayout:3.0.0"
}

def isPublishing = true
if (isPublishing) {
//////////////////////////////////////////////////////////////////////publishing begin///////////////////////////////////////////////////////////////
// add publish script
    publishing {
        publications {
            release(MavenPublication) {
                pom {
                    name = 'LibCool'
                    description = 'An Library for Jetpack Compose'
                    url = 'https://github.com/yfcyfc123234/LibCool'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'yfcyfc123234'
                            name = 'yfc'
                            email = 'cfycfy123234@gmail.com'
                        }
                    }

                    scm {
                        connection = 'https://github.com/yfcyfc123234/LibCool.git'
                        developerConnection = 'https://github.com/yfcyfc123234/LibCool.git'
                        url = 'https://github.com/yfcyfc123234/LibCool'
                    }
                }

                groupId "io.github.yfcyfc123234"
                artifactId "lib-cool"
                version "1.0.3"

                afterEvaluate {
                    from components.release
                }
            }
        }
        repositories {
            maven {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername // ossrhUsername is your sonatype username
                    password ossrhPassword // ossrhUsername is your sonatype password
                }
            }
        }
    }

// signing, this need key, secret, we put it into gradle.properties
    signing {
        sign publishing.publications.release
    }
//////////////////////////////////////////////////////////////////////publishing end///////////////////////////////////////////////////////////////
}
